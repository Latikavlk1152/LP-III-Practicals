//DAA EXP 2 huffman
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Node {
public:
    int freq;
    char symbol;
    Node* left;
    Node* right;
    string huff;

    Node(int f, char s, Node* l = nullptr, Node* r = nullptr) : freq(f), symbol(s), left(l), right(r), huff("") {}

    bool operator<(const Node& other) const {
        return freq > other.freq; // Note: We reverse the comparison to use min-heap.
    }
};

void printNodes(Node* node, string val = "") {
    string newVal = val + node->huff;

    if (node->left)
        printNodes(node->left, newVal);
    if (node->right)
        printNodes(node->right, newVal);

    if (!node->left && !node->right)
        cout << node->symbol << " -> " << newVal << endl;
}

int main() {
    vector<char> chars = {'A', 'B', 'C', 'D'};
    vector<int> freq = {23,12,34,10};
    priority_queue<Node> nodes;

    for (size_t x = 0; x < chars.size(); ++x) {
        nodes.push(Node(freq[x], chars[x]));
    }

    while (nodes.size() > 1) {
        Node* left = new Node(nodes.top());
        nodes.pop();
        Node* right = new Node(nodes.top());
        nodes.pop();

        left->huff = '0';
        right->huff = '1';

        Node* newNode = new Node(left->freq + right->freq, left->symbol + right->symbol, left, right);
        nodes.push(*newNode);
    }

    Node* root = new Node(nodes.top());
    printNodes(root);

    return 0;
}

/*
Huffman Coding :
Time complexity: O(nlogn) where n is the number of unique characters.
If there are n nodes, extractMin() is called 2*(n â€“ 1) times.
extractMin() takes O(logn) time as it calls minHeapify(). So, overall complexity is O(nlogn).
*/

//--------------------------------------------------------------------------------------------------------------------------------------------