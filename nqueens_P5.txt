
//DAA EXP N QUEENS

#include <iostream>
#include <vector>

using namespace std;

bool isSafe(vector<vector<int>>& board, int row, int col, int N) {
    // Check if there is a Queen in the same column
    for (int i = 0; i < row; ++i) {
        if (board[i][col] == 1) {
            return false;
        }
    }

    // Check upper left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check upper right diagonal
    for (int i = row, j = col; i >= 0 && j < N; --i, ++j) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true;
}

bool solveNQueens(vector<vector<int>>& board, int row, int N) {
    if (row == N) {
        // All Queens are placed successfully
        return true;
    }

    for (int col = 0; col < N; ++col) {
        if (isSafe(board, row, col, N)) {
            board[row][col] = 1; // Place the Queen

            // Recur for the next row
            if (solveNQueens(board, row + 1, N)) {
                return true;
            }

            // If placing the Queen in the current position doesn't lead to a solution,
            // remove the Queen and backtrack
            board[row][col] = 0;
        }
    }

    // If no position in this row is valid, return false to trigger backtracking
    return false;
}

void printBoard(vector<vector<int>>& board, int N) {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int N = 8; // Change N to the desired number of Queens

    vector<vector<int>> board(N, vector<int>(N, 0));

    // Place the first Queen at (0, 0)
    board[0][4] = 1;

    if (solveNQueens(board, 1, N)) {
        cout << "Solution found:\n";
        printBoard(board, N);
    } else {
        cout << "No solution exists.";
    }

    return 0;
}


/*
Time Complexity: O(N!)
Auxiliary Space: O(N^2)
*/
//------------------------------------------------------------------------------